/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package amostra;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import org.json.simple.JSONObject;
import utilitarios.Arquivo;
import utilitarios.ModeloDeTabelaAbstrato;
import utilitarios.exceptions.ArquivoExistenteException;

/**
 *
 * @author W8
 */
public class SelecionarAmostraView extends javax.swing.JDialog {

    private TableModelTweets table;
    private String diretorio = "";

    /**
     * Creates new form SelecionarAmostraView
     *
     * @param parent
     * @param modal
     */
    public SelecionarAmostraView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setarModeloTableModel(jTTweets);
        jTTweets.getColumnModel().getColumn(0).setPreferredWidth(25);
        jTTweets.getColumnModel().getColumn(1).setPreferredWidth(750);
        jTTweets.getColumnModel().getColumn(2).setPreferredWidth(25);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTTweets = new javax.swing.JTable();
        jCBSelecionarTodos = new javax.swing.JCheckBox();
        jBRotular = new org.jdesktop.swingx.JXButton();
        jXButton1 = new org.jdesktop.swingx.JXButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jTTweets.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTTweets);

        jCBSelecionarTodos.setBackground(new java.awt.Color(255, 255, 255));
        jCBSelecionarTodos.setText("Selecionar todos");
        jCBSelecionarTodos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBSelecionarTodosItemStateChanged(evt);
            }
        });

        jBRotular.setBackground(new java.awt.Color(255, 255, 255));
        jBRotular.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jBRotular.setText("Selecionar Amostra");
        jBRotular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRotularActionPerformed(evt);
            }
        });

        jXButton1.setBackground(new java.awt.Color(255, 255, 255));
        jXButton1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jXButton1.setText("Cancelar");
        jXButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 944, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCBSelecionarTodos)
                .addGap(261, 261, 261)
                .addComponent(jBRotular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jXButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBRotular, jXButton1});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBRotular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBSelecionarTodos))
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCBSelecionarTodosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBSelecionarTodosItemStateChanged
        selecionarTodos(jCBSelecionarTodos.isSelected());
    }//GEN-LAST:event_jCBSelecionarTodosItemStateChanged

    private void jBRotularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRotularActionPerformed
        selecionarAmostra();
    }//GEN-LAST:event_jBRotularActionPerformed

    private void jXButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXButton1ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jXButton1ActionPerformed

    public void selecionarAmostra() {
        ArrayList<String> tweets = getAmostraDeTweets();
        salvarAmostra(tweets, diretorio);
        irParaTelaRotulacaoDeTweets(tweets);
    }

    public void selecionarTodos(boolean seleciona) {
        this.table.getTweets().stream().map((tweet) -> {
            tweet.setSelecionado(seleciona);
            return tweet;
        }).forEach((_item) -> {
            this.table.fireTableDataChanged();
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SelecionarAmostraView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SelecionarAmostraView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SelecionarAmostraView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SelecionarAmostraView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            SelecionarAmostraView dialog = new SelecionarAmostraView(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    public void exibirTweets(ArrayList<String> tweets, String diretorio) {
        tweets.stream().forEach((tweet) -> {
            this.table.addRow(tweet, false);
        });
        this.diretorio = diretorio;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXButton jBRotular;
    private javax.swing.JCheckBox jCBSelecionarTodos;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTTweets;
    private org.jdesktop.swingx.JXButton jXButton1;
    // End of variables declaration//GEN-END:variables

    private void irParaTelaRotulacaoDeTweets(ArrayList<String> tweets) {
        if (tweets.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Nenhum tweet selecionado!", "Aviso do sistema", JOptionPane.WARNING_MESSAGE);
        } else {
            RotularAmostraTweets teste = new RotularAmostraTweets(null, true);
            teste.exibirTweets(tweets);
            teste.setLocationRelativeTo(null);
            teste.setVisible(true);
        }
    }

    private ArrayList<String> getAmostraDeTweets() {
        ArrayList<String> lista = new ArrayList<>();
        table.getTweets().stream().filter((tweet) -> (tweet.isSelecionado())).forEach((tweet) -> {
            lista.add(tweet.getTexto());
        });
        return lista;
    }

    private void salvarAmostra(ArrayList<String> tweets, String diretorio) {
        String dir = diretorio.substring(0, diretorio.lastIndexOf("\\"));
        try {
            File arquivoAmostra = Arquivo.criar(dir, new SimpleDateFormat("ddMMyyyyHHmmss").format(new Date()) + "amostra.txt");
            for (String tweet : tweets) {
                JSONObject texto = new JSONObject();
                texto.put("text", tweet);
                Arquivo.escrever(arquivoAmostra, texto, true);
            }
        } catch (IOException ex) {
            Logger.getLogger(SelecionarAmostraView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ArquivoExistenteException ex) {
        }
    }

    private void setarModeloTableModel(JTable tabela) {
        table = new TableModelTweets(tabela);
        tabela.setModel(table);
    }

}

class TableModelTweets extends ModeloDeTabelaAbstrato {

    public String[] colunas = new String[]{"Nº", "Tweet", "Selecionar?"};

    public TableModelTweets(JTable tabela) {
        super(tabela);
    }

    @Override
    public int getColumnCount() {
        return this.colunas.length;
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        Tweet tweet = (Tweet) this.lista.get(rowIndex);
        switch (columnIndex) {
            case 0:
                return rowIndex + 1;
            case 1:
                return tweet.getTexto();
            case 2:
                return tweet.isSelecionado();
            default:
                throw new IndexOutOfBoundsException();
        }
    }

    @Override
    public void setValueAt(Object value, int rowIndex, int columnIndex) {
        Tweet tweet = (Tweet) this.lista.get(rowIndex);
        switch (columnIndex) {
            case 1:
                tweet.setTexto((String) value);
                break;
            case 2:
                tweet.setSelecionado((Boolean) value);
                break;
            default:
                throw new IndexOutOfBoundsException();
        }
    }

    @Override
    public String getColumnName(int indice) {
        return this.colunas[indice];
    }

    public void addRow(String texto, boolean positivo) {
        this.lista.add(new Tweet(texto, positivo));
        int ultimoIndice = getRowCount() - 1;
        fireTableRowsInserted(ultimoIndice, ultimoIndice);
    }

    public Tweet getTweet(int indice) {
        return (Tweet) this.lista.get(indice);
    }

    @Override
    public boolean isCellEditable(int row, int column) {
        return column == 2;
    }

    @Override
    public Class getColumnClass(int indice) {
        if (indice == 2) {
            return Boolean.class;
        } else {
            return String.class;
        }
    }

    public ArrayList<Tweet> getTweets() {
        return this.lista;
    }

    public class Tweet {

        private String texto;
        private boolean selecionado;

        public Tweet(String texto, boolean positivo) {
            this.texto = texto;
            this.selecionado = positivo;
        }

        public String getTexto() {
            return texto;
        }

        public void setTexto(String texto) {
            this.texto = texto;
        }

        public boolean isSelecionado() {
            return selecionado;
        }

        public void setSelecionado(boolean selecionado) {
            this.selecionado = selecionado;
        }
    }
}
